/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { Public } from "../../decorators/public.decorator";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateLectureArgs } from "./CreateLectureArgs";
import { UpdateLectureArgs } from "./UpdateLectureArgs";
import { DeleteLectureArgs } from "./DeleteLectureArgs";
import { LectureCountArgs } from "./LectureCountArgs";
import { LectureFindManyArgs } from "./LectureFindManyArgs";
import { LectureFindUniqueArgs } from "./LectureFindUniqueArgs";
import { Lecture } from "./Lecture";
import { LectureService } from "../lecture.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Lecture)
export class LectureResolverBase {
  constructor(
    protected readonly service: LectureService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @Public()
  @graphql.Query(() => MetaQueryPayload)
  async _lecturesMeta(
    @graphql.Args() args: LectureCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @Public()
  @graphql.Query(() => [Lecture])
  async lectures(
    @graphql.Args() args: LectureFindManyArgs
  ): Promise<Lecture[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Lecture, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Lecture",
    action: "read",
    possession: "own",
  })
  async lecture(
    @graphql.Args() args: LectureFindUniqueArgs
  ): Promise<Lecture | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Lecture)
  @nestAccessControl.UseRoles({
    resource: "Lecture",
    action: "create",
    possession: "any",
  })
  async createLecture(
    @graphql.Args() args: CreateLectureArgs
  ): Promise<Lecture> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Lecture)
  @nestAccessControl.UseRoles({
    resource: "Lecture",
    action: "update",
    possession: "any",
  })
  async updateLecture(
    @graphql.Args() args: UpdateLectureArgs
  ): Promise<Lecture | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Lecture)
  @nestAccessControl.UseRoles({
    resource: "Lecture",
    action: "delete",
    possession: "any",
  })
  async deleteLecture(
    @graphql.Args() args: DeleteLectureArgs
  ): Promise<Lecture | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
